<?xml version = "1.0"?>
<launch>
    <arg name="localization"                                  default="false"/>
    <arg     if="$(arg localization)" name="args"             default=""/> 
    <arg unless="$(arg localization)" name="args"             default="--delete_db_on_start"/>
    <arg name="database_path"                                 default="rtabmap.db"/> 
    <arg name="controller"                                    default="false"/>

<!-- Navigation stuff (move_base) -->
    <!-- <include file="$(find turtlebot_navigation)/launch/includes/move_base_rtab.launch.xml"/> -->

<!-- MarvelMind -->
    <include file="$(find hedge_msg_adapter)/launch/hedge_msg_adapter.launch"/>

<!-- Camera -->
    <include file="$(find thesis)/launch/ourcamera.launch"/>

<!-- RTABMAP -->
    <group ns="rtabmap">
        <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
            <remap from="rgb/image"       to="/camera/color/image_raw"/>
            <remap from="depth/image"     to="/camera/depth/image_rect_raw"/>
            <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
            <remap from="rgbd_image"      to="rgbd_image"/>
            <remap from="odom"            to="rgbd_odometry"/>

            <param name="frame_id"                    type="string" value="base_footprint"/>
            <param name="odom_frame_id"               type="string" value="odom"/>
            <param name="publish_tf"                  type="bool"   value="false"/>
            <param name="ground_truth_frame_id"       type="string" value=""/>
            <param name="ground_truth_base_frame_id"  type="string" value=""/>
            <param name="wait_for_transform"          type="bool"   value="true"/>
            <param name="wait_for_transform_duration" type="double" value="0.2"/>
            <param name="approx_sync"                 type="bool"   value="false"/>         
            <param name="config_path"                 type="string" value=""/>
            <param name="queue_size"                  type="int"    value="10"/>
            <param name="subscribe_rgbd"              type="bool"   value="false"/>
            <!-- guess frame id might be useful to use encoder info -->
            <param name="guess_frame_id"              type="string" value=""/>
            <param name="guess_min_translation"       type="double" value="0"/>
            <param name="guess_min_rotation"          type="double" value="0"/>
            <!-- After 20 frames of wich odom was not able to find, reset map. New map is later merged with old one if loopback is found -->
            <param name="Odom/ResetCountdown"         type="int"     value="10"/>
            <param name="Odom/Holonomic"              type="bool"    value="false"/>
            <param name="Vis/MaxFeatures"             type="string"  value="1000"/>
            <param name="Vis/MaxDepth"                  type="string" value="2.0"/>         <!-- Max feature depth for odometry -->
            <param name="Reg/Force3DoF"               type="bool"    value="true"/>
        </node>

        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="log" args="$(arg args)">        
            <!-- inputs -->
            <remap from="rgb/image"       to="/camera/color/image_raw"/>
            <remap from="depth/image"     to="/camera/depth/image_rect_raw"/>
            <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
            <remap from="rgbd_image"      to="rgbd_image"/>
            <remap from="odom"            to="/Kalman/odometry/filtered"/>
            <!-- output -->
            <remap from="grid_map" to="/map"/>
        
            <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
            <param name="database_path"       type="string" value="$(arg database_path)"/>
            <param name="frame_id"            type="string" value="base_footprint"/>
            <param name="odom_frame_id"       type="string" value=""/>
            <param name="map_frame_id"         type="string" value="map"/>
            <param name="publish_tf"                  type="bool"   value="false"/>
            <param name="wait_for_transform_duration"  type="double"   value="0.2"/>
            <param name="subscribe_depth"     type="bool"   value="true"/>
            <param name="subscribe_scan"      type="bool"   value="false"/>
            <param name="RGBD/ProximityBySpace"        type="string" value="true"/> 
            <param name="RGBD/AngularUpdate"           type="string" value="0.01"/>
            <param name="RGBD/LinearUpdate"            type="string" value="0.01"/>  
            <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  
            <param name="Kp/MaxDepth"                  type="string" value="2.0"/>
            <param name="Reg/Strategy"                 type="string" value="0"/>       <!-- 0=vis, 1=ICP, 2=both. 0 works best -->
            <param name="Reg/Force3DoF"                type="string" value="true"/>
            <param name="Vis/MinInliers"               type="string" value="12"/>      <!-- 3D visual words correspondence distance -->
            <param name="Vis/InlierDistance"           type="string" value="0.1"/>
            <param name="Vis/MaxDepth"                  type="string" value="3.0"/>     <!-- Max feature depth for loop closure detection -->
            <param name="Rtabmap/TimeThr"              type="string" value="700"/>
            <param name="Rtabmap/LoopThr"             type="string" value="0.11"/>      <!-- Threshold for loop closure hypothesis to be confirmed -->
            <param name="Mem/RehearsalSimilarity"      type="string" value="0.2"/>      <!-- similarity threshold to merge nodes -->
            <param name="Optimizer/Slam2D"             type="string" value="true"/>
            <param name="Mem/STMSize"                  type="string" value="30"/> <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
            <param name="Grid/MaxGroundHeight"      type="double" value="0.0"/>       <!-- all points below MaxGroundHeight are ground -->
            <param name="Grid/MaxObstacleHeight"    type="double" value="0.1"/>       <!-- all points above MaxGroundHeight and below MaxObstacleHeight are obstacles -->
            <param name="Grid/NormalsSegmentation"  type="bool"   value="false"/> <!-- Use simple passthrough to filter the ground instead of normals segmentation -->
            <param name="Grid/RangeMax"             type="double" value="3.0"/>
            <param name="Grid/RangeMin"             type="double" value="0.2"/>
            <param name="GridGlobal/OccupancyThr"      type="double"   value="0.65"/>        <!-- 0<param<1 -->
            <param name="GridGlobal/ProbClampingMax"      type="double"   value="0.971"/>    <!-- 0<param<1 -->
            <param name="GridGlobal/ProbClampingMin"      type="double"   value="0.1192"/>   <!-- 0<param<1 -->
            <param name="RGBD/MarkerDetection"      type="bool"   value="false"/> 
            <!-- localization mode -->
            <param name="Mem/IncrementalMemory" type="string" value="true"/>
            <param name="Mem/InitWMWithAllNodes" type="string" value="false"/>
            <param if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
            <param if="$(arg localization)" name="Mem/InitWMWithAllNodes" type="string" value="true"/>
        </node>
    </group>

<!-- TurtleBot Launch -->
    <group ns="kobuki">
        <include file="$(find turtlebot_bringup)/launch/minimal.launch"/>
            <param name="/kobuki/mobile_base/use_imu_heading"   type="bool" value="false"/>
    </group>
    <group if="$(arg controller)">
        <group ns="controller">
            <node name="ps3joy" pkg="thesis" type="ps3joy.py" output="log"/>
        </group>
        <group ns="kobuki">
            <include file="$(find turtlebot_teleop)/launch/ps3_teleop.launch" />
        </group>
    </group>
    <group unless="$(arg controller)">
        <group ns="kobuki">
            <include file="$(find turtlebot_teleop)/launch/keyboard_teleop.launch" />
        </group>
    </group>

<!-- Kalman Filter -->
    <group ns="Kalman">
        <node name="ekf_odom" pkg="robot_localization" type="ekf_localization_node" clear_params="true" output="log">
            <param name="frequency" value="10"/>
            <param name="two_d_mode" value="true"/>                         <!-- SUPER IMPORTANT FOR 2D NAVIGATION !!!!! -->
            <param name="map_frame" value="map"/>
            <param name="odom_frame" value="odom"/>
            <param name="base_link_frame" value="base_footprint"/>
            <param name="world_frame" value="odom"/>

            <param name="odom0" value="/kobuki/odom"/> 
            <param name="odom1" value="/rtabmap/rgbd_odometry"/> 
            <param name="imu0" value="/kobuki/mobile_base/sensors/imu_data"/>

            <rosparam param="odom0_config"> <!--wheels-->
                [false, false, false,         <!-- X, Y, Z -->                <!-- Set X and Y to false because they're not primary sources (just integrated from velocities) -->
                false, false, false,         <!-- roll, pitch, yaw -->      <!-- yaw pose same story as X and Y above -->
                true, true, false,         <!-- linear velocities -->       <!-- Set ydot to true to let the wheel encoders add the 0 lateral speed into the filter -->
                false, false, true,         <!-- angular velocities -->
                false, false, false]        <!-- accelerations -->
            </rosparam>
            <rosparam param="odom1_config"> <!-- rgbd -->
                [false, false, false,         <!-- X, Y, Z -->                <!-- not sure about z because if we set force3D to true, we force 2D slam -->
                false, false, false,         <!-- roll, pitch, yaw -->
                true, false, false,          <!-- linear velocities -->
                false, false, true,         <!-- angular velocities -->
                false, false, false]        <!-- accelerations -->
            </rosparam>
            <rosparam param="imu0_config">   <!--gyro-->
                [false, false, false,       <!-- X, Y, Z -->
                false, false, false,         <!-- roll, pitch, yaw -->
                false, false, false,        <!-- linear velocities -->
                false, false, true,         <!-- angular velocities -->
                false, false, false]        <!-- accelerations -->
            </rosparam>            
        </node>
        <node name="ekf_map" pkg="robot_localization" type="ekf_localization_node" clear_params="true" output="log">
            <param name="frequency" value="10"/>
            <param name="two_d_mode" value="true"/>                         <!-- SUPER IMPORTANT FOR 2D NAVIGATION !!!!! -->
            <param name="map_frame" value="map"/>
            <param name="odom_frame" value="odom"/>
            <param name="base_link_frame" value="base_footprint"/>
            <param name="world_frame" value="map"/>

            <param name="transform_time_offset" value="0.1"/> 
            <param name="smooth_lagged_data" value="true"/> 
            <param name="dynamic_process_noise_covariance" value="false"/>

            <param name="pose0" value="/hedge_pose"/> 
            <param name="pose1" value="/rtabmap/localization_pose"/> 
<!-- # Since rtabmap is more likely to fail than the beacons, you might want to treat the beacons
# as a primary source, and set pose1_differential: true
# In that case, set x', y' and yaw' to true, and the rest to false! -->

            <rosparam param="pose0_config"> <!--marvelmind-->
                [true,  true,  false,
               false, false, false,
               false, false, false,
               false, false, false,
               false, false, false]        
            </rosparam>
            <!-- poseN_rejection_threshold: (YOU MIGHT WANT THIS. If it's above the stated threshold value, the EKF will ignore the reading) (Defaults to numeric_limits<double>::max()) -->
            <param name="pose0_rejection_threshold" value="3"/>

            <rosparam param="pose1_config"> <!-- rtabmap -->
                [true,  true, false,
               false, false, true,
               false, false, false,
               false, false, false,
               false, false, false]
            </rosparam>          
            <param name="pose1_rejection_threshold" value="2"/> 
        </node>
    </group>

<!-- RViz -->
    <node type="rviz" name="rviz" pkg="rviz" args="-d /home/marco/catkin_ws/src/thesis/config/ourviz.rviz" />

<!-- Static Transforms -->
    <node pkg="tf" type="static_transform_publisher" name="beacon_imu_broadcaster" args="0 0 0 0 0 0 base_link beacon_imu_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="beacon_map_broadcaster" args="3.61 -0.38 0 0 0 0 map beacon_map 100" />
</launch>